import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { Users, Trash2, AlertTriangle, Shield, UserCog } from 'lucide-react';
import toast from 'react-hot-toast';
import AdminRequests from '../../components/Admin/AdminRequests';

const Admin = () => {
  const { user, token } = useSelector((state) => state.auth);
  const [users, setUsers] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [deleteConfirm, setDeleteConfirm] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [activeTab, setActiveTab] = useState('users');

  // Check if user is superadmin
  const isSuperAdmin = user?.role === 'superadmin';

  const fetchUsers = async () => {
    try {
      setIsLoading(true);
      const res = await axios.get('/api/users', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUsers(res.data.data || []);
    } catch (err) {
      setError(err?.response?.data?.message || 'Failed to load users');
      toast.error(err?.response?.data?.message || 'Failed to load users', { position: 'bottom-center' });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (token) fetchUsers();
  }, [token]);

  const handleDeleteUser = async (userId, userName) => {
    try {
      setIsDeleting(true);
      await axios.delete(`/api/users/${userId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      toast.success(`User ${userName} deleted successfully`, { position: 'bottom-center' });
      setDeleteConfirm(null);
      fetchUsers(); // Refresh the users list
    } catch (err) {
      const errorMessage = err?.response?.data?.message || 'Failed to delete user';
      toast.error(errorMessage, { position: 'bottom-center' });
    } finally {
      setIsDeleting(false);
    }
  };

  const confirmDelete = (user) => {
    setDeleteConfirm({
      id: user._id,
      name: `${user.firstName} ${user.lastName}`,
      email: user.email
    });
  };

  const cancelDelete = () => {
    setDeleteConfirm(null);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            {isSuperAdmin ? 'Super Admin Panel' : 'Admin Panel'}
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            {isSuperAdmin 
              ? 'Full system access: Manage all users, approve admin requests, and system configuration' 
              : 'User management access: Manage regular users (cannot manage other admins)'
            }
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-2 bg-blue-50 dark:bg-blue-900/20 px-3 py-1 rounded-full">
            <Shield className="w-4 h-4 text-blue-600" />
            <span className="text-sm text-blue-600 dark:text-blue-400 font-medium">
              {isSuperAdmin ? 'Super Admin' : 'Admin'}
            </span>
          </div>
          <span className="text-sm text-gray-500 dark:text-gray-400">
            {user?.firstName} {user?.lastName}
          </span>
        </div>
      </div>

      {/* Tabs - Only show for superadmin */}
      {isSuperAdmin && (
        <div className="border-b border-gray-200 dark:border-gray-700">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('users')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'users'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
            >
              <Users className="w-5 h-5 inline mr-2" />
              User Management
            </button>
            <button
              onClick={() => setActiveTab('requests')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'requests'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
            >
              <UserCog className="w-5 h-5 inline mr-2" />
              Admin Requests
            </button>
          </nav>
        </div>
      )}

      {/* Tab Content */}
      {(activeTab === 'users' || !isSuperAdmin) && (
        <>
          {/* Role-based stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Total Users</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white mt-1">{users.length}</p>
            </div>
            <div className="p-3 rounded-lg bg-blue-100 dark:bg-blue-900/20">
              <Users className="h-6 w-6 text-blue-600 dark:text-blue-400" />
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Regular Users</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white mt-1">
                {users.filter(u => u.role === 'user').length}
              </p>
            </div>
            <div className="p-3 rounded-lg bg-green-100 dark:bg-green-900/20">
              <Users className="h-6 w-6 text-green-600 dark:text-green-400" />
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Admins</p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white mt-1">
                {users.filter(u => u.role === 'admin').length}
              </p>
            </div>
            <div className="p-3 rounded-lg bg-purple-100 dark:bg-purple-900/20">
              <UserCog className="h-6 w-6 text-purple-600 dark:text-purple-400" />
            </div>
          </div>
        </div>
        
        {isSuperAdmin && (
          <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Super Admins</p>
                <p className="text-2xl font-bold text-gray-900 dark:text-white mt-1">
                  {users.filter(u => u.role === 'superadmin').length}
                </p>
              </div>
              <div className="p-3 rounded-lg bg-red-100 dark:bg-red-900/20">
                <Shield className="h-6 w-6 text-red-600 dark:text-red-400" />
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Users table */}
      <div className="bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Users</h3>
          {!isSuperAdmin && (
            <div className="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-3 py-1 rounded-full">
              Regular Admin View: Admins and Super Admins are hidden
            </div>
          )}
        </div>
        {isLoading ? (
          <div className="flex items-center justify-center py-10">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
          </div>
        ) : users.length === 0 ? (
          <div className="text-sm text-gray-500 dark:text-gray-400">No data available.</div>
        ) : (
          <>
            {/* Desktop Table View */}
            <div className="hidden lg:block overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-900/50">
                  <tr>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Name</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Email</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Role</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Last Login</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Created</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  {users.map((u) => (
                    <tr key={u._id}>
                      <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{u.firstName} {u.lastName}</td>
                      <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{u.email}</td>
                      <td className="px-4 py-2 whitespace-nowrap">
                        <span className={`px-2 py-1 rounded text-xs font-medium flex items-center space-x-1 ${
                          u.role === 'superadmin' 
                            ? 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300' 
                            : u.role === 'admin' 
                            ? 'bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-300' 
                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
                        }`}>
                          {u.role === 'superadmin' && <Shield className="w-3 h-3" />}
                          {u.role === 'admin' && <UserCog className="w-3 h-3" />}
                          <span className="capitalize">
                            {u.role === 'superadmin' ? 'Super Admin' : u.role}
                          </span>
                        </span>
                      </td>
                      <td className="px-4 py-2 whitespace-nowrap">
                        <span className={`px-2 py-1 rounded text-xs font-medium ${u.isActive ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300' : 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300'}`}>
                          {u.isActive ? 'Active' : 'Inactive'}
                        </span>
                      </td>
                      <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{u.lastLogin ? new Date(u.lastLogin).toLocaleString() : '—'}</td>
                      <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{u.createdAt ? new Date(u.createdAt).toLocaleString() : '—'}</td>
                      <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">
                        {/* Delete button logic based on role hierarchy */}
                        {(() => {
                          // Cannot delete yourself
                          if (u._id === user._id) return null;
                        
                        // Superadmin can delete admins and users, but not other superadmins
                        if (isSuperAdmin && u.role !== 'superadmin') {
                          return (
                            <button
                              onClick={() => confirmDelete(u)}
                              className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 transition-colors"
                              title="Delete user"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          );
                        }
                        
                        // Regular admin can only delete users (not admins or superadmins)
                        if (!isSuperAdmin && u.role === 'user') {
                          return (
                            <button
                              onClick={() => confirmDelete(u)}
                              className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 transition-colors"
                              title="Delete user"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          );
                        }
                        
                        // No delete permission
                        return (
                          <span className="text-gray-400 dark:text-gray-600" title="Cannot delete this user">
                            <Trash2 className="h-4 w-4" />
                          </span>
                        );
                      })()}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Mobile Card View */}
          <div className="lg:hidden space-y-4">
            {users.map((u) => (
              <div key={u._id} className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">{u.firstName} {u.lastName}</h3>
                    <p className="text-xs text-gray-600 dark:text-gray-300">{u.email}</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`px-2 py-1 rounded text-xs font-medium flex items-center space-x-1 ${
                      u.role === 'superadmin' 
                        ? 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300' 
                        : u.role === 'admin' 
                        ? 'bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-300' 
                        : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
                    }`}>
                      {u.role === 'superadmin' && <Shield className="w-3 h-3" />}
                      {u.role === 'admin' && <UserCog className="w-3 h-3" />}
                      <span className="capitalize">
                        {u.role === 'superadmin' ? 'Super Admin' : u.role}
                      </span>
                    </span>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4 text-xs">
                  <div>
                    <span className="text-gray-500 dark:text-gray-400">Status:</span>
                    <span className={`ml-1 px-2 py-1 rounded text-xs font-medium ${u.isActive ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300' : 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300'}`}>
                      {u.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-500 dark:text-gray-400">Last Login:</span>
                    <span className="ml-1 text-gray-600 dark:text-gray-300">{u.lastLogin ? new Date(u.lastLogin).toLocaleDateString() : '—'}</span>
                  </div>
                  <div className="col-span-2">
                    <span className="text-gray-500 dark:text-gray-400">Created:</span>
                    <span className="ml-1 text-gray-600 dark:text-gray-300">{u.createdAt ? new Date(u.createdAt).toLocaleDateString() : '—'}</span>
                  </div>
                </div>

                {/* Actions for mobile */}
                <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                  {(() => {
                    // Cannot delete yourself
                    if (u._id === user._id) return null;
                    
                    const isSuperAdmin = user.role === 'superadmin';
                    const isAdmin = user.role === 'admin';
                    const targetIsSuperAdmin = u.role === 'superadmin';
                    const targetIsAdmin = u.role === 'admin';
                    
                    // Only superadmin can delete other superadmins
                    if (targetIsSuperAdmin && !isSuperAdmin) {
                      return (
                        <span className="text-gray-400 dark:text-gray-600 text-xs">No actions available</span>
                      );
                    }
                    
                    // Admins can only delete regular users
                    if (isAdmin && !isSuperAdmin && targetIsAdmin) {
                      return (
                        <span className="text-gray-400 dark:text-gray-600 text-xs">No actions available</span>
                      );
                    }
                    
                    return (
                      <button
                        onClick={() => handleDeleteUser(u._id)}
                        className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 text-xs flex items-center space-x-1"
                        title="Delete user"
                      >
                        <Trash2 className="h-3 w-3" />
                        <span>Delete</span>
                      </button>
                    );
                  })()}
                </div>
              </div>
            ))}
          </div>
        </>
      )}

      {/* Admin Requests Tab - Only for superadmin */}
      {isSuperAdmin && activeTab === 'requests' && (
        <AdminRequests />
      )}

      {/* Delete Confirmation Modal */}
      {deleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center space-x-3 mb-4">
              <div className="p-2 rounded-full bg-red-100 dark:bg-red-900/20">
                <AlertTriangle className="h-6 w-6 text-red-600 dark:text-red-400" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Delete User
              </h3>
            </div>
            
            <p className="text-gray-600 dark:text-gray-300 mb-4">
              Are you sure you want to delete <strong>{deleteConfirm.name}</strong> ({deleteConfirm.email})?
            </p>
            
            <p className="text-sm text-red-600 dark:text-red-400 mb-6">
              This action cannot be undone. All user data, files, and activities will be permanently deleted.
            </p>
            
            <div className="flex space-x-3">
              <button
                onClick={cancelDelete}
                disabled={isDeleting}
                className="flex-1 px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors disabled:opacity-50"
              >
                Cancel
              </button>
              <button
                onClick={() => handleDeleteUser(deleteConfirm.id, deleteConfirm.name)}
                disabled={isDeleting}
                className="flex-1 px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 flex items-center justify-center"
              >
                {isDeleting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Deleting...
                  </>
                ) : (
                  'Delete User'
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Admin;
